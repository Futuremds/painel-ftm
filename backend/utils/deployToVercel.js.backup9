const path = require('path');
const fs = require('fs-extra');
const { execSync } = require('child_process');

console.log('=== DEBUG: deployToVercel.js carregado ===');

// Configura√ß√µes do dom√≠nio
const DOMAIN = 'painelftm.com.br';
const SITES_DIR = '/var/www/sites';
const NGINX_SITES_DIR = '/etc/nginx/sites-available';
const NGINX_ENABLED_DIR = '/etc/nginx/sites-enabled';

// Fun√ß√£o para criar nome do subdom√≠nio
function createSubdomain(siteName) {
  return siteName
    .toLowerCase()
    .replace(/[^a-z0-9-]/g, '')  // Remove caracteres inv√°lidos
    .replace(/^-+|-+$/g, '')      // Remove h√≠fens do in√≠cio e fim
    .replace(/-+/g, '-')          // M√∫ltiplos h√≠fens viram um s√≥
    .substring(0, 50);            // Limita o tamanho
}

// Fun√ß√£o para gerar configura√ß√£o Nginx
function generateNginxConfig(subdomain, sitePath) {
  return `server {
    listen 80;
    server_name ${subdomain}.${DOMAIN};
    
    root ${sitePath};
    index index.html index.htm;
    
    # Configura√ß√µes de seguran√ßa
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    # Configura√ß√µes de cache para arquivos est√°ticos
    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Configura√ß√£o principal
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Configura√ß√µes de seguran√ßa adicionais
    location ~ /\\. {
        deny all;
    }
    
    # Configura√ß√µes de compress√£o
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
}`;
}

// Fun√ß√£o para criar site local
async function createLocalSite(siteName, siteDir) {
  try {
    console.log(`üèóÔ∏è Criando site local: ${siteName}`);
    
    // 1. Criar nome do subdom√≠nio
    const subdomain = createSubdomain(siteName);
    const fullDomain = `${subdomain}.${DOMAIN}`;
    const sitePath = path.join(SITES_DIR, subdomain);
    
    console.log(`üìÅ Subdom√≠nio: ${subdomain}`);
    console.log(`üåê URL completa: ${fullDomain}`);
    console.log(`üìÇ Caminho: ${sitePath}`);
    
    // 2. Copiar arquivos do site
    console.log('üìã Copiando arquivos...');
    await fs.copy(siteDir, sitePath);
    console.log('‚úÖ Arquivos copiados');
    
    // 3. Criar configura√ß√£o Nginx
    console.log('‚öôÔ∏è Criando configura√ß√£o Nginx...');
    const nginxConfig = generateNginxConfig(subdomain, sitePath);
    const nginxConfigPath = path.join(NGINX_SITES_DIR, subdomain);
    
    await fs.writeFile(nginxConfigPath, nginxConfig);
    console.log('‚úÖ Configura√ß√£o Nginx criada');
    
    // 4. Habilitar site no Nginx
    console.log('üîó Habilitando site...');
    const enabledPath = path.join(NGINX_ENABLED_DIR, subdomain);
    await fs.symlink(nginxConfigPath, enabledPath);
    console.log('‚úÖ Site habilitado');
    
    // 5. Testar configura√ß√£o Nginx
    console.log('ÔøΩÔøΩ Testando configura√ß√£o Nginx...');
    try {
      execSync('nginx -t', { stdio: 'pipe' });
      console.log('‚úÖ Configura√ß√£o Nginx v√°lida');
    } catch (error) {
      console.error('‚ùå Erro na configura√ß√£o Nginx:', error.message);
      throw error;
    }
    
    // 6. Recarregar Nginx
    console.log('ÔøΩÔøΩ Recarregando Nginx...');
    execSync('systemctl reload nginx', { stdio: 'pipe' });
    console.log('‚úÖ Nginx recarregado');
    
    return {
      success: true,
      data: {
        subdomain: subdomain,
        url: `http://${fullDomain}`,
        path: sitePath
      }
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao criar site local:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o para verificar se site existe
async function checkSiteExists(siteName) {
  try {
    const subdomain = createSubdomain(siteName);
    const sitePath = path.join(SITES_DIR, subdomain);
    const nginxConfigPath = path.join(NGINX_SITES_DIR, subdomain);
    
    const siteExists = await fs.pathExists(sitePath);
    const configExists = await fs.pathExists(nginxConfigPath);
    
    if (siteExists && configExists) {
      return {
        exists: true,
        subdomain: subdomain,
        url: `http://${subdomain}.${DOMAIN}`,
        path: sitePath
      };
    }
    
    return { exists: false };
  } catch (error) {
    console.error('‚ùå Erro ao verificar site:', error.message);
    return { exists: false };
  }
}

// Fun√ß√£o para atualizar site existente
async function updateLocalSite(siteName, siteDir) {
  try {
    console.log(`üîÑ Atualizando site local: ${siteName}`);
    
    const subdomain = createSubdomain(siteName);
    const sitePath = path.join(SITES_DIR, subdomain);
    
    // Remover arquivos antigos
    await fs.remove(sitePath);
    console.log('üóëÔ∏è Arquivos antigos removidos');
    
    // Copiar novos arquivos
    await fs.copy(siteDir, sitePath);
    console.log('‚úÖ Novos arquivos copiados');
    
    return {
      success: true,
      data: {
        subdomain: subdomain,
        url: `http://${subdomain}.${DOMAIN}`,
        path: sitePath
      }
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar site:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fun√ß√£o principal de deploy
async function deployToVercel(params) {
  try {
    console.log('üöÄ Iniciando deploy local...');

    const { siteName, siteDir } = params;

    if (!siteName) {
      throw new Error('siteName √© obrigat√≥rio');
    }

    if (!siteDir) {
      throw new Error('siteDir √© obrigat√≥rio');
    }

    console.log('üìÅ Diret√≥rio do site:', siteDir);
    console.log('üè∑Ô∏è Nome do site:', siteName);

    // Verificar se site j√° existe
    const existingSite = await checkSiteExists(siteName);
    
    if (existingSite.exists) {
      console.log('üîÑ Site j√° existe, atualizando...');
      return await updateLocalSite(siteName, siteDir);
    } else {
      console.log('üÜï Criando novo site...');
      return await createLocalSite(siteName, siteDir);
    }

  } catch (error) {
    console.error('‚ùå Erro no deploy:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

module.exports = { deployToVercel };
